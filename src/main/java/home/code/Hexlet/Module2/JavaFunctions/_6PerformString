Еще одна типичная операция при работе с коллекциями - это отображение. При отображении мы проходим по всей коллекции и меняем каждый ее
элемент определенным образом. Результаты добавляются в новую коллекцию, которая возвращается после завершения обхода. Менять элементы мы можем
разным способом, но как и в случае с фильтрацией, везде будет один и тот же обход коллекции. Отличаться будет только то, как мы меняем каждый элемент.
Мы можем спрятать обход списка, а логику изменения элементов вынести в лямбда-функцию. В этом упражнении мы напишем такой метод

src/main/java/io/hexlet/App.java
В классе App создайте публичный статический метод map(), который будет отображать список строк. Метод принимает два параметра:

Список строк List<String>, исходная коллекция
Лямбда-функцию Function<String, String>. Эта функция определяет, что будет происходить с каждым элементом. Функция принимает строку и возвращает строку
Метод должен вернуть новый список строк, в котором каждый элемент изменен в соответствии с правилом, определенным в лямбда-функции. Важно, что размер
получившегося списка равен размеру исходного списка. Иными словами, нужно применить функцию к каждому элементу списка. Например, приведем все слова
в списке к верхнему регистру:

var words = new ArrayList<String>();
words.add("Java");
words.add("Python");
words.add("PHP");

var result = App.map(words, word -> word.toUpperCase());

// или используя ссылку на метод
// var result = App.map(words, String::toUpperCase());

System.out.println(result); // ["JAVA", "PYTHON", "PHP"]
Подсказки
Загляните в тесты. Посмотрите, как будет использоваться созданный вами метод