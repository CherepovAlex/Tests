Кэш — это временное хранилище, который содержит скопированные или предварительно загруженные данные, которые часто запрашиваются программами или пользователем. В информационных технологиях Кэш используется повсеместно, например, в браузерах, операционных системах и сетевых устройствах. Кэш значительно сокращает время доступа к данным, особенно при повторном обращении к ней, так как вместо обращения к удаленному источнику, система может обратиться к кешу, и взять данные из него

В этом вам предстоит создать простой кэш с ограниченным размером, который будет хранить последние N запросов пользователя. Когда количество хранящихся в кеше запросов достигнет максимального значения, самый старый элемент должен быть удален.

src/main/java/io/hexlet/App.java
В файле создайте класс Cache, который будет представлять собой кэш для хранения запросов пользователя с ограниченным размером. Конструктор класса принимать в качестве параметра максимальный размер кэша. Кэш хранит запросы пользователя в формате ключ-значение, где ключ — это запрос пользователя, а значение — ответ на этот запрос. Для работы кэшем предусмотрены два метода:

Метод put() добавляет новый запрос в кэш. Метод принимает два строковых параметра — запрос пользователя и ответ на этот запрос
Метод get() принимает один строковые параметр — запрос и получает из кэша ответ на него. Если такого запроса в кэше нет, должен вернуться null
// Создаем кэш с максимальной емкостью в 2 элемента
var cache = new Cache(2);

// Добавляем туда два запроса
cache.put("praesent", "imperdiet et commodo vulputate");
cache.put("amet erat", "in tempus sit amet");

// Обращаемся к кэшу и получаем из него ответы на запросы
cache.get("praesent"); // imperdiet et commodo vulputate
cache.get("amet erat"); // in tempus sit amet
cache.get("some request"); // null

// Добавляем в кэш третий элемент
cache.put("justo sit", "auctor sed tristique in");

cache.get("justo sit"); // auctor sed tristique in
cache.get("amet erat"); // in tempus sit amet

// Так как емкость кеша равна 2, самый старый запрос должен быть удален
cache.get("praesent"); // null
Подсказки
Подумайте, какую реализацию Map удобно использовать для хранения данных, исходя из того, что нам важен порядок добавления элементов
Посмотрите эту статью, она поможет вам получить первый элемент: https://www.baeldung.com/java-linkedhashmap-first-last-key-value-pair
Загляните в тесты, чтобы посмотреть другие варианты работы